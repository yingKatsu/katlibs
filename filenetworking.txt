--@name katlibs/filenetworking
--@author katsu
--@shared

--[[
    for short pieces of data that are private (holodata) or need to be saved (stats)
    library only handles up to 8.3 kb files
    if you need to network files bigger than this, use a stream instead
]]


--netcode--------------------------------------------------------------------------------
local function canSend(fileSize)
    if fileSize > 8333 then
        throw("kl:fn| encountered a file too big for current netcode! time to write net streaming code! (FUCK)")
    end
    
    return fileSize <= net.getBytesLeft()/1.2
end

local networkingQueue = {}
local function networkQueueLoop() --runs every 1.66 seconds if we are reaching bandwidth limits (default net burst refresh is 5 kB/sec)
    local fileSize = networkingQueue[1].fileSize
    
    if canSend(fileSize) then
        networkingQueue[1].func()
        table.remove(networkingQueue,1)
        
        local queueSize = #networkingQueue
        
        if queueSize == 0 then
            printConsole(Color(255,0,0),"kl:fn| ",Color(255,255,255),"queue finished")
            timer.remove("kl:fn_queueloop")
        else
            printConsole(Color(255,0,0),"kl:fn| ",Color(255,255,255),"networking queued file [" .. tostring(queueSize) .. " remaining]")
        end
    end
end

local function networkFile(netmsgName,path,data,fileSize)
    local queueFunc = function()
        net.start(netmsgName)    
        net.writeString(path)
        net.writeUInt(fileSize,16)
        net.writeData(data,fileSize)
        
        if SERVER then
            net.send(owner())
        elseif CLIENT then
            net.send()
        end
    end

    if #networkingQueue == 0 and canSend(fileSize) then
        queueFunc()
    else
        table.insert(networkingQueue,{
            ["func"] = queueFunc,
            ["fileSize"] = fileSize,
        })
        if not timer.exists("kl:fn_queueloop") then 
            --if we can send file because bandwidth limit then start the queueloop
            --if we can't send it because the owner is yet to load, let the clientinit hook take care of that
            timer.create("kl:fn_queueloop", 1.66, 0, networkQueueLoop)
        end    
    end
end

--file functions-----------------------------------------------------------------------------------
if SERVER then
    filenetworking = {}
      
    --loading
    local cbfuncs = {}
    
    local function loadFile(path,cbfunc)
        net.start("kl:fn_clfilerequest")
        net.writeString(path)
        net.send(owner())
        
        cbfuncs[path] = cbfunc
    end
    
    net.receive("kl:fn_loadedfile",function()
        local path = net.readString()
        local fileSize = net.readUInt(16)
        local data = net.readData(fileSize)
        
        cbfuncs[path](data)
        cbfuncs[path] = nil
    end)
    
    net.receive("kl:fn_loadedfile_missing",function()
        cbfuncs[path](nil)
        cbfuncs[path] = nil
    end)
    
    --saving
    local function saveFile(path,data)
        local fileSize = #data

        networkFile("kl:fn_clfilesave",path,data,fileSize)
    end
    
    --pre client init bullshit
    local preclientQueue = {}

    filenetworking.loadFile = function(...)
        table.insert(preclientQueue,{
            func = loadFile,
            args = {...},
        })
    end
    
    filenetworking.saveFile = function(...)
        table.insert(preclientQueue,{
            func = saveFile,
            args = {...},
        })
    end

    hook.add("ClientInitialized","kl:fn_ownerloaded",function(p)
        if p == owner() then
            filenetworking.loadFile = loadFile
            filenetworking.saveFile = saveFile
            
            for _,v in pairs(preclientQueue) do
                v.func(unpack(v.args))
            end
            
            preclientQueue = nil
            
            hook.remove("ClientInitialized","kl:fn_ownerloaded")
        end
    end)
elseif CLIENT and player() == owner() then    
    --loading    
    net.receive("kl:fn_clfilerequest",function()
        local path = net.readString()
        if file.exists(path) then
            file.asyncRead(path,function(a,status,data)
                if status == FSASYNC.OK then
                    local fileSize = #data
                    
                    networkFile("kl:fn_loadedfile",path,data,fileSize)
                else
                    print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"file [" .. path .. "] asyncRead failed with error " .. status)
                end
            end)
        else
            print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"file [" .. path .. "] not found.")
            net.start("kl:fn_loadedfile_missing")
            net.send()
        end
    end)
    
    --saving
    net.receive("kl:fn_clfilesave",function()
        local path = net.readString()
        local fileSize = net.readUInt(16)
        local data = net.readData(fileSize)

        if file.exists(path) then
            print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"overwriting [" .. path .. "]")
        else
            print(Color(255,0,0),"kl:fn| ",Color(255,255,255),"creating new file [" .. path .. "]")

            local dir = string.match(path,".+/")

            if dir ~= nil and not file.isDir(dir) then
                file.createDir(dir)
            end
        end
        file.write(path,data)        
    end)
end

--[[
if SERVER then
    i = 0
    for _=1,10 do
        filenetworking.loadFile("multiholo/rosary.txt",function(data)
            i = i + 1
            print("loaded " .. tostring(i))
        end)
    end
end
]]